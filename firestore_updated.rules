rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // üîê ULTRA ADVANCED SECURITY FUNCTIONS - ENTERPRISE LEVEL
    // ============================================================================
    
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    function isClubAdmin(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(clubId)) &&
             get(/databases/$(database)/documents/users/$(clubId)).data.userType == 'club' &&
             (get(/databases/$(database)/documents/users/$(clubId)).data.adminIds.hasAny([request.auth.uid]) ||
              get(/databases/$(database)/documents/users/$(clubId)).data.leaderId == request.auth.uid);
    }
    
    function isClubMember(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(clubId)) &&
             get(/databases/$(database)/documents/users/$(clubId)).data.userType == 'club' &&
             get(/databases/$(database)/documents/users/$(clubId)).data.memberIds.hasAny([request.auth.uid]);
    }
    
    function isClubOwner(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(clubId)) &&
             get(/databases/$(database)/documents/users/$(clubId)).data.userType == 'club' &&
             get(/databases/$(database)/documents/users/$(clubId)).data.leaderId == request.auth.uid;
    }
    
    function hasValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'name', 'userType']) &&
             request.resource.data.userType in ['student', 'club'] &&
             request.resource.data.email is string &&
             request.resource.data.name is string;
    }
    
    function canModifyClub(clubId) {
      return isAdmin() || isClubOwner(clubId) || isClubAdmin(clubId);
    }
    
    function isValidImageMetadata() {
      return request.resource.data.keys().hasAll(['userId', 'type', 'filename', 'uploadedAt']) &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.type in ['profile_avatar', 'profile_cover', 'club_logo', 'club_cover', 
                                           'event_banner', 'event_gallery', 'post_image', 'document', 
                                           'certificate', 'other'] &&
             request.resource.data.uploadedAt is timestamp;
    }

    // ============================================================================
    // üë§ USER COLLECTION - COMPREHENSIVE USER MANAGEMENT
    // ============================================================================
    
    match /usernames/{username} {
      allow read: if true; 
      allow write: if isAuthenticated();
    }

    match /emails/{email} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && hasValidUserData();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    // ============================================================================
    // üì∏ IMAGE METADATA COLLECTION - COMPREHENSIVE IMAGE TRACKING
    // ============================================================================
    
    match /imageMetadata/{imageId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      isAdmin() ||
                      resource.data.type in ['club_logo', 'club_cover', 'event_banner']);
      
      allow create: if isAuthenticated() && 
                       isValidImageMetadata();
      
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin()) &&
                       request.resource.data.userId == resource.data.userId;
      
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
    }

    // ============================================================================
    // üéâ EVENTS COLLECTION - ENHANCED EVENT MANAGEMENT
    // ============================================================================
    
    match /events/{eventId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.creatorId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['title', 'description', 'creatorId', 'timestamp']);
      
      allow update: if isAuthenticated() && 
                       (resource.data.creatorId == request.auth.uid || 
                        isAdmin() || 
                        isClubAdmin(resource.data.clubId));
      
      allow delete: if isAuthenticated() && 
                       (resource.data.creatorId == request.auth.uid || 
                        isAdmin() || 
                        isClubOwner(resource.data.clubId));
    }

    // ============================================================================
    // üìä CLUB ACTIVITIES COLLECTION - ACTIVITY TRACKING
    // ============================================================================
    
    match /clubActivities/{activityId} {
      allow read: if isAuthenticated() && 
                     (isClubMember(resource.data.clubId) || 
                      isAdmin() ||
                      resource.data.userId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['clubId', 'type', 'description', 'timestamp']) &&
                       request.resource.data.timestamp is timestamp;
      
      allow update: if isAdmin() || isClubAdmin(resource.data.clubId);
      allow delete: if isAdmin() || isClubOwner(resource.data.clubId);
    }

    // ============================================================================
    // üîî NOTIFICATIONS COLLECTION - COMPREHENSIVE NOTIFICATION SYSTEM
    // ============================================================================
    
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      resource.data.recipientId == request.auth.uid ||
                      isAdmin());
      
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['type', 'title', 'message', 'timestamp']) &&
                       request.resource.data.timestamp is timestamp;
      
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        resource.data.recipientId == request.auth.uid ||
                        isAdmin());
      
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        resource.data.recipientId == request.auth.uid ||
                        isAdmin());
    }

    // ============================================================================
    // üìà STATISTICS & ANALYTICS COLLECTIONS
    // ============================================================================
    
    match /userStats/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }

    match /clubStats/{clubId} {
      allow read: if isAuthenticated();
      allow write: if isClubAdmin(clubId) || isAdmin();
    }

    match /leaderboards/{leaderboardId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ============================================================================
    // üí¨ COMMENTS & INTERACTIONS
    // ============================================================================
    
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'content', 'timestamp']) &&
                       request.resource.data.timestamp is timestamp;
      
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
      
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /likes/{likeId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp is timestamp;
      
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // ============================================================================
    // üé´ MEMBERSHIPS & FOLLOWS
    // ============================================================================
    
    match /memberships/{membershipId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['userId', 'clubId', 'status', 'joinedAt']) &&
                       request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        isClubAdmin(resource.data.clubId) || 
                        isAdmin());
      
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        isClubOwner(resource.data.clubId) || 
                        isAdmin());
    }

    match /follows/{followId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.followerId == request.auth.uid &&
                       request.resource.data.timestamp is timestamp;
      
      allow delete: if isAuthenticated() && 
                       resource.data.followerId == request.auth.uid;
    }

    // ============================================================================
    // üèÜ ACHIEVEMENTS & BADGES
    // ============================================================================
    
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /userAchievements/{userAchievementId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['userId', 'achievementId', 'earnedAt']) &&
                       request.resource.data.earnedAt is timestamp;
      
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ============================================================================
    // üì± APP CONFIGURATION & SYSTEM DATA
    // ============================================================================
    
    match /appConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /systemLogs/{logId} {
      allow read: if isAdmin();
      allow write: if isAuthenticated();
    }

    // ============================================================================
    // üîí ADMIN ONLY COLLECTIONS
    // ============================================================================
    
    match /adminLogs/{logId} {
      allow read, write: if isAdmin();
    }

    match /reports/{reportId} {
      allow read: if isAuthenticated() && 
                     (resource.data.reporterId == request.auth.uid || isAdmin());
      
      allow create: if isAuthenticated() && 
                       request.resource.data.reporterId == request.auth.uid &&
                       request.resource.data.timestamp is timestamp;
      
      allow update, delete: if isAdmin();
    }

    // ============================================================================
    // üåê GENERAL FALLBACK - DENY BY DEFAULT
    // ============================================================================
    
    // T√ºm diƒüer koleksiyonlar i√ßin varsayƒ±lan olarak eri≈üim reddedilir
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
