import AsyncStorage from '@react-native-async-storage/async-storage';
import { firebase } from '../firebase/config';

/**
 * Kullanƒ±cƒ±nƒ±n takip ettiƒüi kul√ºpleri AsyncStorage'dan y√∂netir
 */

const STORAGE_KEYS = {
  followedClubs: (userId: string) => `followedClubs_${userId}`,
  clubMemberships: (userId: string) => `clubMemberships_${userId}`,
};

export interface FollowedClub {
  clubId: string;
  clubName: string;
  displayName?: string;
  profileImage?: string;
  university?: string;
  followedAt: string; // ISO string
}

export interface ClubMembership {
  clubId: string;
  clubName: string;
  role: 'member' | 'admin';
  joinedAt: string; // ISO string
}

/**
 * Takip edilen kul√ºp listesini AsyncStorage'dan al
 */
export const getFollowedClubsFromStorage = async (userId: string): Promise<FollowedClub[]> => {
  try {
    const data = await AsyncStorage.getItem(STORAGE_KEYS.followedClubs(userId));
    return data ? JSON.parse(data) : [];
  } catch (error) {
    console.error('Takip edilen kul√ºpler alƒ±nƒ±rken hata:', error);
    return [];
  }
};

/**
 * Takip edilen kul√ºp listesini AsyncStorage'a kaydet
 */
export const saveFollowedClubsToStorage = async (userId: string, clubs: FollowedClub[]): Promise<void> => {
  try {
    await AsyncStorage.setItem(STORAGE_KEYS.followedClubs(userId), JSON.stringify(clubs));
    console.log(`‚úÖ ${clubs.length} takip edilen kul√ºp AsyncStorage'a kaydedildi`);
  } catch (error) {
    console.error('Takip edilen kul√ºpler kaydedilirken hata:', error);
  }
};

/**
 * Yeni bir kul√ºb√º takip listesine ekle
 */
export const addFollowedClubToStorage = async (
  userId: string, 
  clubData: Omit<FollowedClub, 'followedAt'>
): Promise<void> => {
  try {
    const existingClubs = await getFollowedClubsFromStorage(userId);
    
    // Zaten takip ediliyor mu kontrol et
    const isAlreadyFollowed = existingClubs.some(club => club.clubId === clubData.clubId);
    
    if (!isAlreadyFollowed) {
      const newClub: FollowedClub = {
        ...clubData,
        followedAt: new Date().toISOString()
      };
      
      const updatedClubs = [...existingClubs, newClub];
      await saveFollowedClubsToStorage(userId, updatedClubs);
      
      console.log(`‚ûï Kul√ºp takip listesine eklendi: ${clubData.clubName}`);
    }
  } catch (error) {
    console.error('Kul√ºp takip listesine eklenirken hata:', error);
  }
};

/**
 * Bir kul√ºb√º takip listesinden √ßƒ±kar
 */
export const removeFollowedClubFromStorage = async (userId: string, clubId: string): Promise<void> => {
  try {
    const existingClubs = await getFollowedClubsFromStorage(userId);
    const updatedClubs = existingClubs.filter(club => club.clubId !== clubId);
    
    await saveFollowedClubsToStorage(userId, updatedClubs);
    
    console.log(`‚ûñ Kul√ºp takip listesinden √ßƒ±karƒ±ldƒ±: ${clubId}`);
  } catch (error) {
    console.error('Kul√ºp takip listesinden √ßƒ±karƒ±lƒ±rken hata:', error);
  }
};

/**
 * Kul√ºp √ºyeliklerini AsyncStorage'dan al
 */
export const getClubMembershipsFromStorage = async (userId: string): Promise<ClubMembership[]> => {
  try {
    const data = await AsyncStorage.getItem(STORAGE_KEYS.clubMemberships(userId));
    return data ? JSON.parse(data) : [];
  } catch (error) {
    console.error('Kul√ºp √ºyelikleri alƒ±nƒ±rken hata:', error);
    return [];
  }
};

/**
 * Kul√ºp √ºyeliklerini AsyncStorage'a kaydet
 */
export const saveClubMembershipsToStorage = async (userId: string, memberships: ClubMembership[]): Promise<void> => {
  try {
    await AsyncStorage.setItem(STORAGE_KEYS.clubMemberships(userId), JSON.stringify(memberships));
    console.log(`‚úÖ ${memberships.length} kul√ºp √ºyeliƒüi AsyncStorage'a kaydedildi`);
  } catch (error) {
    console.error('Kul√ºp √ºyelikleri kaydedilirken hata:', error);
  }
};

/**
 * Database'den ilk kez y√ºklerken takip listelerini ba≈ülat
 */
export const initializeClubRelationsFromDatabase = async (userId: string): Promise<void> => {
  try {
    console.log('üîÑ Kul√ºp ili≈ükileri database\'den ba≈ülatƒ±lƒ±yor...');
    
    // AsyncStorage'da zaten veri var mƒ± kontrol et
    const existingFollowedClubs = await getFollowedClubsFromStorage(userId);
    const existingMemberships = await getClubMembershipsFromStorage(userId);
    
    if (existingFollowedClubs.length > 0 || existingMemberships.length > 0) {
      console.log('‚úÖ Kul√ºp ili≈ükileri zaten mevcut, database\'den y√ºkleme atlanƒ±yor');
      return;
    }
    
    // Database'den y√ºkle (permission hatasƒ± yakalanacak)
    try {
      const db = firebase.firestore();
      
      // Kullanƒ±cƒ± verilerini al
      const userDoc = await db.collection('users').doc(userId).get();
      
      if (userDoc.exists) {
        const userData = userDoc.data();
        const following = userData?.following || [];
        const clubMemberships = userData?.clubMemberships || [];
        
        // Takip edilen kul√ºpler i√ßin detaylarƒ± al
        const followedClubPromises = following.map(async (clubId: string) => {
          try {
            const clubDoc = await db.collection('users').doc(clubId).get();
            if (clubDoc.exists) {
              const clubData = clubDoc.data();
              return {
                clubId,
                clubName: clubData?.clubName || clubData?.displayName || 'Bilinmeyen Kul√ºp',
                displayName: clubData?.displayName,
                profileImage: clubData?.profileImage,
                university: clubData?.university
              };
            }
          } catch (error) {
            console.error(`Kul√ºp detaylarƒ± alƒ±nƒ±rken hata (${clubId}):`, error);
          }
          return null;
        });
        
        const followedClubsData = (await Promise.all(followedClubPromises)).filter(Boolean) as Omit<FollowedClub, 'followedAt'>[];
        
        // AsyncStorage'a kaydet
        const followedClubs: FollowedClub[] = followedClubsData.map(club => ({
          ...club,
          followedAt: new Date().toISOString()
        }));
        
        const memberships: ClubMembership[] = clubMemberships.map((membership: any) => ({
          clubId: membership.clubId,
          clubName: membership.clubName || 'Bilinmeyen Kul√ºp',
          role: membership.role || 'member',
          joinedAt: new Date().toISOString()
        }));
        
        await Promise.all([
          saveFollowedClubsToStorage(userId, followedClubs),
          saveClubMembershipsToStorage(userId, memberships)
        ]);
        
        console.log('‚úÖ Kul√ºp ili≈ükileri database\'den ba≈üarƒ±yla y√ºklendi:', {
          followedClubs: followedClubs.length,
          memberships: memberships.length
        });
      }
    } catch (dbError) {
      console.log('‚ö†Ô∏è Database\'den kul√ºp ili≈ükileri y√ºklenemedi, bo≈ü listeler kullanƒ±lacak:', dbError);
      // Varsayƒ±lan bo≈ü listeler
      await Promise.all([
        saveFollowedClubsToStorage(userId, []),
        saveClubMembershipsToStorage(userId, [])
      ]);
    }
  } catch (error) {
    console.error('Kul√ºp ili≈ükileri ba≈ülatƒ±lƒ±rken hata:', error);
  }
};

export default {
  getFollowedClubsFromStorage,
  saveFollowedClubsToStorage,
  addFollowedClubToStorage,
  removeFollowedClubFromStorage,
  getClubMembershipsFromStorage,
  saveClubMembershipsToStorage,
  initializeClubRelationsFromDatabase
};
