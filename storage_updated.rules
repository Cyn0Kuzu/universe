rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // ============================================================================
    // üîê ADVANCED STORAGE SECURITY FUNCTIONS
    // ============================================================================
    
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType in ['application/pdf', 'image/jpeg', 'image/png'] &&
             request.resource.size < 50 * 1024 * 1024; // 50MB limit for documents
    }

    // ============================================================================
    // üë§ USER PROFILE IMAGES - AVATARS & COVERS
    // ============================================================================
    
    match /users/avatars/{userId}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageFile();
      
      allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
    }
    
    match /users/covers/{userId}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageFile();
      
      allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
    }

    // ============================================================================
    // üè¢ CLUB IMAGES - LOGOS & COVERS
    // ============================================================================
    
    match /clubs/logos/{clubId}/{fileName} {
      allow read: if true; // Public read for club logos
      
      allow write: if isAuthenticated() && 
                      isValidImageFile() &&
                      (isOwner(clubId) || 
                       firestore.exists(/databases/(default)/documents/users/$(clubId)) &&
                       firestore.get(/databases/(default)/documents/users/$(clubId)).data.userType == 'club' &&
                       (firestore.get(/databases/(default)/documents/users/$(clubId)).data.adminIds.hasAny([request.auth.uid]) ||
                        firestore.get(/databases/(default)/documents/users/$(clubId)).data.leaderId == request.auth.uid));
      
      allow delete: if isAuthenticated() && 
                       (isOwner(clubId) || isAdmin());
    }
    
    match /clubs/covers/{clubId}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isAuthenticated() && 
                      isValidImageFile() &&
                      (isOwner(clubId) || 
                       firestore.exists(/databases/(default)/documents/users/$(clubId)) &&
                       firestore.get(/databases/(default)/documents/users/$(clubId)).data.userType == 'club' &&
                       (firestore.get(/databases/(default)/documents/users/$(clubId)).data.adminIds.hasAny([request.auth.uid]) ||
                        firestore.get(/databases/(default)/documents/users/$(clubId)).data.leaderId == request.auth.uid));
      
      allow delete: if isAuthenticated() && 
                       (isOwner(clubId) || isAdmin());
    }

    // ============================================================================
    // üéâ EVENT IMAGES - BANNERS & GALLERY
    // ============================================================================
    
    match /events/banners/{eventId}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isAuthenticated() && 
                      isValidImageFile() &&
                      (firestore.exists(/databases/(default)/documents/events/$(eventId)) &&
                       firestore.get(/databases/(default)/documents/events/$(eventId)).data.creatorId == request.auth.uid);
      
      allow delete: if isAuthenticated() && 
                       (firestore.exists(/databases/(default)/documents/events/$(eventId)) &&
                        firestore.get(/databases/(default)/documents/events/$(eventId)).data.creatorId == request.auth.uid) ||
                       isAdmin();
    }
    
    match /events/gallery/{eventId}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isAuthenticated() && 
                      isValidImageFile();
      
      allow delete: if isAuthenticated() && 
                       (firestore.exists(/databases/(default)/documents/events/$(eventId)) &&
                        firestore.get(/databases/(default)/documents/events/$(eventId)).data.creatorId == request.auth.uid) ||
                       isAdmin();
    }

    // ============================================================================
    // üìù POST IMAGES - USER GENERATED CONTENT
    // ============================================================================
    
    match /posts/images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageFile();
      
      allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
    }

    // ============================================================================
    // üìÑ DOCUMENTS & CERTIFICATES
    // ============================================================================
    
    match /documents/{userId}/{fileName} {
      allow read: if isAuthenticated() && 
                     (isOwner(userId) || isAdmin());
      
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidDocumentFile();
      
      allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
    }
    
    match /certificates/{userId}/{fileName} {
      allow read: if isAuthenticated() && 
                     (isOwner(userId) || isAdmin());
      
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidDocumentFile();
      
      allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
    }

    // ============================================================================
    // üóÇÔ∏è MISCELLANEOUS FILES
    // ============================================================================
    
    match /misc/{userId}/{fileName} {
      allow read: if isAuthenticated() && 
                     (isOwner(userId) || isAdmin());
      
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      (isValidImageFile() || isValidDocumentFile());
      
      allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
    }

    // ============================================================================
    // üëë ADMIN ONLY STORAGE
    // ============================================================================
    
    match /admin/{fileName} {
      allow read, write: if isAdmin();
    }
    
    match /system/{fileName} {
      allow read, write: if isAdmin();
    }

    // ============================================================================
    // üö´ SECURITY FALLBACK - DENY BY DEFAULT
    // ============================================================================
    
    // T√ºm diƒüer dosyalar i√ßin varsayƒ±lan olarak eri≈üim reddedilir
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
